name: CI/CD

on: [push]

env:
  BASE_URL_PREVIEW: website-romainclement.vercel.app

jobs:
  qa:
    name: QA
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Dependencies audit
        run: pipenv run pip-audit --progress-spinner off
      - name: Lint check
        run: |
          pipenv run black --check utils tests
          pipenv run flake8 utils tests
      - name: Static check
        run: pipenv run mypy --strict utils tests
      - name: Tests
        run: |
          pipenv run pytest -v --cov=utils --cov=tests --cov-branch --cov-report=term-missing tests
          pipenv run coverage xml
      - name: Publish code coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  build-preview:
    name: Build Preview
    needs: qa
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, 'master') && !contains(github.ref, 'tags')}}

    env:
      APP_ENVIRONMENT: preview
      MAILER_URL: ${{ secrets.MAILER_URL_PREVIEW }}
      CHIFFRE_PUBLIC_KEY: ""
      CHIFFRE_PROJECT_ID: ""

    outputs:
      github_ref_slug: ${{ steps.output_step.outputs.github_ref_slug }}
      site_url: ${{ steps.output_step.outputs.site_url }}

    steps:
      - uses: actions/checkout@v4
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --deploy
      - name: Set preview site URL using branch slug
        run: echo "SITE_URL=https://${GITHUB_REF_SLUG_URL}-${BASE_URL_PREVIEW}" >> $GITHUB_ENV
      - name: Build package
        run: |
          pipenv run mkdocs build --strict
          cp -R content/.well-known dist/.
          cp content/.vercelignore dist/.
          echo "${SITE_URL}" > dist/CNAME
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-preview
          path: dist
      - id: output_step
        run: |
          echo "::set-output name=github_ref_slug::${GITHUB_REF_SLUG_URL}"
          echo "::set-output name=site_url::${SITE_URL}"

  build-production:
    name: Build Production
    needs: qa
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master')

    env:
      APP_ENVIRONMENT: production
      SITE_URL: ${{ secrets.SITE_URL }}
      MAILER_URL: ${{ secrets.MAILER_URL }}
      CHIFFRE_PUBLIC_KEY: ${{ secrets.CHIFFRE_PUBLIC_KEY }}
      CHIFFRE_PROJECT_ID: ${{ secrets.CHIFFRE_PROJECT_ID }}

    outputs:
      site_url: ${{ steps.output_step.outputs.site_url }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache Python modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --deploy
      - name: Build package
        run: |
          pipenv run mkdocs build
          cp -R content/.well-known dist/.
          cp content/.vercelignore dist/.
          echo "${SITE_URL}" > dist/CNAME
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-production
          path: dist
      - id: output_step
        run: echo "::set-output name=site_url::${SITE_URL}"

  deploy-preview:
    name: Deploy Preview
    needs: build-preview
    runs-on: ubuntu-latest
    environment:
      name: preview/${{ needs.build-preview.outputs.github_ref_slug }}
      url: ${{ needs.build-preview.outputs.site_url }}
    if: ${{ !contains(github.ref, 'master') && !contains(github.ref, 'tags')}}

    env:
      VERCEL_ORG_ID: ${{ secrets.NOW_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.NOW_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.NOW_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-preview
          path: dist
      - name: Set vercel alias using branch slug
        run: echo "VERCEL_ALIAS=${GITHUB_REF_SLUG_URL}-${BASE_URL_PREVIEW}" >> $GITHUB_ENV
      - name: Deploy to Vercel
        run: |
          cd dist
          DEPLOYMENT_URL=$(vercel --yes --token $VERCEL_TOKEN)
          vercel alias --token $VERCEL_TOKEN set $DEPLOYMENT_URL $VERCEL_ALIAS

  deploy-production:
    name: Deploy Production
    needs: build-production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ needs.build-production.outputs.site_url }}
    if: contains(github.ref, 'master')

    permissions:
      pages: write
      id-token: write

    env:
      VERCEL_ORG_ID: ${{ secrets.NOW_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.NOW_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.NOW_TOKEN }}

    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist
      - name: Deploy to Vercel
        run: cd dist && vercel --confirm --token $VERCEL_TOKEN --prod
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: dist
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
