name: CI/CD

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Cache Python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Run QA
        run: |
          pipenv run safety check
          pipenv run black --check utils
          pipenv run flake8 utils
          pipenv run mypy --strict utils

  build-preview:
    name: Build Preview
    needs: test
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, 'master') }}

    env:
      APP_ENVIRONMENT: preview
      SITE_URL: ${{ secrets.SITE_URL_PREVIEW }}
      MAILER_URL: ${{ secrets.MAILER_URL_PREVIEW }}
      CHIFFRE_PUBLIC_KEY: ""
      CHIFFRE_PROJECT_ID: ""
      SENTRY_DSN: ""

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Cache Python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Build package
        run: |
          pipenv run mkdocs build
          cp -R content/.well-known dist/.
          cp content/.vercelignore dist/.
          echo $SITE_URL > dist/CNAME
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-preview
          path: dist

  build-production:
    name: Build Production
    needs: test
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master')

    env:
      APP_ENVIRONMENT: production
      SITE_URL: ${{ secrets.SITE_URL }}
      MAILER_URL: ${{ secrets.MAILER_URL }}
      CHIFFRE_PUBLIC_KEY: ${{ secrets.CHIFFRE_PUBLIC_KEY }}
      CHIFFRE_PROJECT_ID: ${{ secrets.CHIFFRE_PROJECT_ID }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Cache Python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Build package
        run: |
          pipenv run mkdocs build
          cp -R content/.well-known dist/.
          cp content/.vercelignore dist/.
          echo $SITE_URL > dist/CNAME
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-production
          path: dist

  deploy-preview:
    name: Deploy Preview
    needs: build-preview
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref, 'master') }}

    env:
      VERCEL_ORG_ID: ${{ secrets.NOW_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.NOW_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.NOW_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-preview
          path: dist
      - name: Deploy to Vercel
        run: cd dist && vercel --confirm --token $VERCEL_TOKEN

  deploy-production:
    name: Deploy Production
    needs: build-production
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master')

    env:
      VERCEL_ORG_ID: ${{ secrets.NOW_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.NOW_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.NOW_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-production
          path: dist
      - name: Deploy to Vercel
        run: cd dist && vercel --confirm --token $VERCEL_TOKEN --prod
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GH_PERSONAL_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
